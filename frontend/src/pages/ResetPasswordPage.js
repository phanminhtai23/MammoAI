import React, { useState, useEffect } from "react";
import { Form, Input, Button, message, Alert, Spin } from "antd";
import {
    LockOutlined,
    EyeInvisibleOutlined,
    EyeTwoTone,
    KeyOutlined,
    ExclamationCircleOutlined,
    CheckCircleOutlined,
} from "@ant-design/icons";
import { useNavigate, useParams, useSearchParams } from "react-router-dom";
import userService from "../services/userService";

const ResetPasswordPage = () => {
    const navigate = useNavigate();
    const { token } = useParams(); // L·∫•y token t·ª´ URL params
    const [searchParams] = useSearchParams(); // Ho·∫∑c t·ª´ query params
    const [form] = Form.useForm();

    const [loading, setLoading] = useState(true); // Loading khi check token
    const [submitLoading, setSubmitLoading] = useState(false); // Loading khi submit
    const [tokenValid, setTokenValid] = useState(false);
    const [userEmail, setUserEmail] = useState("");
    const [errorMessage, setErrorMessage] = useState("");

    // L·∫•y token t·ª´ URL (c√≥ th·ªÉ l√† params ho·∫∑c query)
    const resetToken = token || searchParams.get("token");

    // Check token validity khi component mount
    useEffect(() => {
        if (!resetToken) {
            setErrorMessage("Link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá!");
            setLoading(false);
            return;
        }

        checkTokenValidity();
    }, [resetToken]);

    // Ki·ªÉm tra token c√≥ h·ª£p l·ªá kh√¥ng
    const checkTokenValidity = async () => {
        try {
            setLoading(true);

            // G·ªçi API ki·ªÉm tra token
            const response = await userService.verifyResetToken({
                token: resetToken,
            });
            console.log("response:", response);
            if (response.status === 200 && response.data.payload) {
                setTokenValid(true);
                setUserEmail(response.data.payload.sub);
                // message.success("Token h·ª£p l·ªá! Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u m·ªõi.");
            }
        } catch (error) {
            console.log("error:", error);
            console.error("Token verification error:", error);

            const errorMsg = error.response?.data?.detail || error.message;

            if (errorMsg && errorMsg.includes("expired")) {
                setErrorMessage(
                    "Link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ h·∫øt h·∫°n! Vui l√≤ng y√™u c·∫ßu link m·ªõi."
                );
            } else if (errorMsg && errorMsg.includes("invalid")) {
                setErrorMessage("Link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá!");
            } else {
                setErrorMessage(
                    "C√≥ l·ªói x·∫£y ra khi x√°c th·ª±c link! Vui l√≤ng th·ª≠ l·∫°i."
                );
            }

            setTokenValid(false);
        } finally {
            setLoading(false);
        }
    };

    // X·ª≠ l√Ω ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
    const handleResetPassword = async (values) => {
        try {
            setSubmitLoading(true);

            const response = await userService.resetPassword({
                token: resetToken,
                new_password: values.password,
                confirm_password: values.confirmPassword,
            });

            if (response.status === 200) {
                message.success("ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng!");

                // Ch·ªù 2 gi√¢y r·ªìi chuy·ªÉn v·ªÅ login
                setTimeout(() => {
                    navigate("/login", {
                        state: {
                            message:
                                "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i th√†nh c√¥ng. Vui l√≤ng ƒëƒÉng nh·∫≠p v·ªõi m·∫≠t kh·∫©u m·ªõi!",
                        },
                    });
                }, 2000);
            }
        } catch (error) {
            console.log("error:", error);
            if (error.response.status === 401) {
                message.error("Link ƒë√£ h·∫øt h·∫°n! Vui l√≤ng y√™u c·∫ßu link m·ªõi.");
                setTokenValid(false);
                setErrorMessage("Link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ h·∫øt h·∫°n!");
            } else if (error.response.status === 400) {
                message.error("L·ªói khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u!");
                setErrorMessage("L·ªói khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u!");
            } else {
                message.error("C√≥ l·ªói x·∫£y ra! Vui l√≤ng th·ª≠ l·∫°i.");
            }
            
        } finally {
            setSubmitLoading(false);
        }
    };

    // Format email ƒë·ªÉ hi·ªÉn th·ªã
    const formatEmail = (email) => {
        if (!email) return "";
        const [username, domain] = email.split("@");
        if (username.length <= 3) return email;
        const hiddenUsername =
            username.slice(0, 2) +
            "*".repeat(Math.max(username.length - 4, 1)) +
            username.slice(-2);
        return `${hiddenUsername}@${domain}`;
    };

    // Render loading state
    const renderLoading = () => (
        <div className="text-center">
            <Spin size="large" />
            <p className="text-gray-600 mt-4">
                ƒêang x√°c th·ª±c link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u...
            </p>
        </div>
    );

    // Render error state (token invalid/expired)
    const renderError = () => (
        <>
            {/* Header */}
            <div className="text-center mb-8">
                <div className="mx-auto w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mb-4">
                    <ExclamationCircleOutlined className="text-red-600 text-2xl" />
                </div>
                <h2 className="text-3xl font-bold text-gray-800">
                    Link ƒë√£ h·∫øt h·∫°n!
                </h2>
            </div>

            {/* Error Alert */}
            <Alert
                message="‚ùå L·ªói x√°c th·ª±c"
                description={errorMessage}
                type="error"
                showIcon={false}
                className="mb-6"
            />

            {/* Instructions */}
            <div className="p-4 bg-yellow-50 border border-yellow-200 rounded-lg mb-6">
                <p className="text-yellow-800 text-sm font-semibold mb-2">
                    üí° Gi·∫£i ph√°p:
                </p>
                <ul className="text-yellow-700 text-sm space-y-1 ml-4">
                    <li>‚Ä¢ Y√™u c·∫ßu link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u m·ªõi</li>
                    <li>‚Ä¢ Link ch·ªâ c√≥ hi·ªáu l·ª±c trong 10 ph√∫t</li>
                </ul>
            </div>

            {/* Action buttons */}
            <div className="space-y-3">
                <Button
                    type="primary"
                    block
                    className="h-12 rounded-lg bg-blue-600 hover:bg-blue-700"
                    onClick={() => navigate("/forgot-password")}
                >
                    Y√™u C·∫ßu Link M·ªõi
                </Button>

                <Button
                    block
                    className="h-12 rounded-lg"
                    onClick={() => navigate("/login")}
                >
                    Quay V·ªÅ ƒêƒÉng Nh·∫≠p
                </Button>
            </div>
        </>
    );

    // Render reset password form
    const renderResetForm = () => (
        <>
            {/* Header */}
            <div className="text-center mb-8">
                <div className="mx-auto w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mb-4">
                    <KeyOutlined className="text-green-600 text-2xl" />
                </div>
                <h2 className="text-3xl font-bold text-gray-800">
                    ƒê·∫∑t L·∫°i M·∫≠t Kh·∫©u
                </h2>
                <p className="text-gray-500 mt-2">
                    Nh·∫≠p m·∫≠t kh·∫©u m·ªõi cho t√†i kho·∫£n c·ªßa b·∫°n
                </p>
                {userEmail && (
                    <p className="text-green-600 font-semibold mt-2">
                        üìß {formatEmail(userEmail)}
                    </p>
                )}
            </div>

            {/* Password Form */}
            <Form
                form={form}
                onFinish={handleResetPassword}
                layout="vertical"
                requiredMark={false}
            >
                <Form.Item
                    name="password"
                    label="M·∫≠t kh·∫©u m·ªõi"
                    rules={[
                        {
                            required: true,
                            message: "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u m·ªõi!",
                        },
                        {
                            min: 8,
                            message: "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±!",
                        },
                        {
                            pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/,
                            message:
                                "M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t 1 ch·ªØ hoa, 1 ch·ªØ th∆∞·ªùng v√† 1 s·ªë!",
                        },
                    ]}
                >
                    <Input.Password
                        prefix={<LockOutlined className="text-gray-400" />}
                        placeholder="Nh·∫≠p m·∫≠t kh·∫©u m·ªõi"
                        iconRender={(visible) =>
                            visible ? <EyeTwoTone /> : <EyeInvisibleOutlined />
                        }
                        className="h-12 rounded-lg"
                        size="large"
                    />
                </Form.Item>

                <Form.Item
                    name="confirmPassword"
                    label="X√°c nh·∫≠n m·∫≠t kh·∫©u"
                    dependencies={["password"]}
                    rules={[
                        {
                            required: true,
                            message: "Vui l√≤ng x√°c nh·∫≠n m·∫≠t kh·∫©u!",
                        },
                        ({ getFieldValue }) => ({
                            validator(_, value) {
                                if (
                                    !value ||
                                    getFieldValue("password") === value
                                ) {
                                    return Promise.resolve();
                                }
                                return Promise.reject(
                                    new Error("M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!")
                                );
                            },
                        }),
                    ]}
                >
                    <Input.Password
                        prefix={<LockOutlined className="text-gray-400" />}
                        placeholder="X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi"
                        iconRender={(visible) =>
                            visible ? <EyeTwoTone /> : <EyeInvisibleOutlined />
                        }
                        className="h-12 rounded-lg"
                        size="large"
                    />
                </Form.Item>

                <Form.Item className="mb-6">
                    <Button
                        type="primary"
                        htmlType="submit"
                        block
                        className="h-12 rounded-lg bg-green-600 hover:bg-green-700 transition text-lg font-semibold"
                        loading={submitLoading}
                        icon={<CheckCircleOutlined />}
                    >
                        {submitLoading
                            ? "ƒêang c·∫≠p nh·∫≠t..."
                            : "ƒê·∫∑t L·∫°i M·∫≠t Kh·∫©u"}
                    </Button>
                </Form.Item>
            </Form>

            {/* Password Requirements */}
            <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
                <p className="text-blue-800 text-sm font-semibold mb-2">
                    üìã Y√™u c·∫ßu m·∫≠t kh·∫©u:
                </p>
                <ul className="text-blue-700 text-xs space-y-1 ml-4">
                    <li>‚Ä¢ √çt nh·∫•t 8 k√Ω t·ª±</li>
                    <li>‚Ä¢ Ch·ª©a √≠t nh·∫•t 1 ch·ªØ hoa (A-Z)</li>
                    <li>‚Ä¢ Ch·ª©a √≠t nh·∫•t 1 ch·ªØ th∆∞·ªùng (a-z)</li>
                    <li>‚Ä¢ Ch·ª©a √≠t nh·∫•t 1 s·ªë (0-9)</li>
                </ul>
            </div>
        </>
    );

    return (
        <div className="min-h-screen bg-gradient-to-br from-green-100 to-blue-300 flex items-center justify-center px-4">
            <div className="bg-white shadow-2xl rounded-2xl overflow-hidden w-full max-w-md">
                <div className="p-8">
                    {/* Render theo tr·∫°ng th√°i */}
                    {loading
                        ? renderLoading()
                        : !tokenValid
                        ? renderError()
                        : renderResetForm()}

                    {/* Footer - ch·ªâ hi·ªÉn th·ªã khi kh√¥ng loading */}
                    {!loading && (
                        <div className="text-center mt-6 pt-6 border-t border-gray-200">
                            <p className="text-gray-600 text-sm">
                                Nh·ªõ m·∫≠t kh·∫©u r·ªìi?{" "}
                                <button
                                    onClick={() => navigate("/login")}
                                    className="text-blue-600 hover:text-blue-800 font-semibold transition cursor-pointer"
                                >
                                    ƒêƒÉng nh·∫≠p ngay
                                </button>
                            </p>
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
};

export default ResetPasswordPage;
